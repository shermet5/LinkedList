package LinckedList;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

public class LinckedList implements List {
    private  Node current;
    private Node head;
    private int size;
    @Override
    public int size() {
        return size;
    }

    @Override
    public boolean isEmpty() {
        return head == null ? true : false;
    }

    @Override
    public boolean contains(Object o) {
        return false;
    }

    @Override
    public Iterator iterator() {
        return null;
    }

    @Override
    public Object[] toArray() {
        return new Object[0];
    }

    @Override
    public boolean add(Object o) {
        if(current == null){
            current = new Node((String)o, null, null);
            size++;
            head = current;
//            System.out.println(current.value);
            return true;
        }else{
            current.next = new Node((String)o, null, current);
            current = current.next;
            size++;
//            System.out.println(current.value);
            return true;
        }
    }

    @Override
    public boolean remove(Object o) {
        return false;
    }

    @Override
    public boolean addAll(Collection c) {
        return false;
    }

    @Override
    public boolean addAll(int index, Collection c) {
        return false;
    }

    @Override
    public void clear() {
        head = null;
        current = null;
        size = 0;
    }

    @Override
    public Object get(int index) {
        Node result = head;
        for(int i = 0; i < index; i++){
            result = result.next;
        }
        return result.value;
    }

    @Override
    public Object set(int index, Object element) {
        return null;
    }

    @Override
    public void add(int index, Object element) {

    }

    @Override
    public Object remove(int index) {
        Node removed;
        Node elem = head;
        if(current == null)return null;
        if(index == 0){
            removed = new Node(head.value, head.next, head.prev);
            current = head.next;
            head = current;
            head.prev = null;
            size--;
            return removed.value;

        }
            for(int i = 0;i < index; i++){
               elem = elem.next;
            }
            removed = new Node(elem);
            if(index - 1 == size) elem.next = null;
            if(elem.next == null){
                elem.prev.next = null;
            }else{
                elem.next.prev = elem.prev;
                elem.prev.next = elem.next;
            }
            size--;
            return removed.value;
    }

    @Override
    public int indexOf(Object o) {
        return 0;
    }

    @Override
    public int lastIndexOf(Object o) {
        return 0;
    }

    @Override
    public ListIterator listIterator() {
        return null;
    }

    @Override
    public ListIterator listIterator(int index) {
        return null;
    }

    @Override
    public List subList(int fromIndex, int toIndex) {
        return null;
    }

    @Override
    public boolean retainAll(Collection c) {
        return false;
    }

    @Override
    public boolean removeAll(Collection c) {
        return false;
    }

    @Override
    public boolean containsAll(Collection c) {
        return false;
    }

    @Override
    public Object[] toArray(Object[] a) {
        return new Object[0];
    }
    private class Node{
        public String value;
        public Node next;
        public Node prev;
        public Node(String value ,Node next,Node prev){
            this.value = value;
            this.next = next;
            this.prev = prev;
        }
        public Node(Node node){
            this.value = node.value;
            this.next = node.next;
            this.prev = node.prev;
        }
    }
}

